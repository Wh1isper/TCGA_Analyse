data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
samplesDown = getResults(query,cols = c("cases"))
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
GenomicDataCommons::status()
install.packages("GenomicDataCommons")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
httr::GET("http://cran.r-project.org/Rlogo.jpg")
sessionInfo()
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
timeout(20))
library(httr)
set_config(use_proxy(url = "127.0.0.1",port = "1888"))
set_config(use_proxy(url = "127.0.0.1",port = 1888))
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
timeout(20))
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
install.packages("curl")
install.packages("curl")
install.packages("curl")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
library(TCGAbiolinks)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
Sys.setenv(http_proxy="http://127.0.0.1:1888")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
query = read.delim("./gdc_sample_sheet.2020-04-17.tsv")
View(query)
samplesDown = getResults(query,cols = c("cases"))
View(sampleCounts)
View(samplesDown)
dataSmTP = TCGAquery_SampleTypes(barcode = samplesDown, typesample = "TP")
dataSmNT = TCGAquery_SampleTypes(barcode = samplesDown, typesample = "NT")
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts",
)
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
if (0){
quary = GDCquery(project = "TCGA-LUAD",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTseq - Counts")
samplesDown = getResults(query,cols = c("cases"))
}
View(LUAD_Counts_expMatrix)
samplesDown = LUAD_Counts_expMatrix[1]
View(samplesDown)
samplesDown = LUAD_Counts_expMatrix[,1]
samplesDown = LUAD_Counts_expMatrix[1]
View(samplesDown)
samplesDown = head(LUAD_Counts_expMatrix)
View(samplesDown)
samplesDown = row.names(LUAD_Counts_expMatrix)
samplesDown[1:5]
samplesDown = names(LUAD_Counts_expMatrix)
dataSmTP = TCGAquery_SampleTypes(barcode = samplesDown, typesample = "TP")
dataSmNT = TCGAquery_SampleTypes(barcode = samplesDown, typesample = "NT")
Counts = data.frame(c(LUAD_Counts_expMatrix[,dataSmNT],LUAD_Counts_expMatrix[,dataSmTP]))
rownames(Counts) = row.names(LUAD_Counts_expMatrix)
colnames(Counts) = c(dataSmNT, dataSmTP)
View(Counts)
View(Counts)
BiocManager::install("edgeR")
sudo
BiocManager::install("edgeR")
library("edgeR")
library("edgeR")
group = c(rep(1,59),rep(2,533))
y = DGEList(counts=Counts, group = group)
View(y)
View(y)
keep = filterByExpr(y)
y = y[keep,,keep.lib.sizes=FALSE]
y = calcNormFactors(y)
y = estimateDisp(y)
et = exactTest(y)
View(y)
et = topTags(et, n=100000)
et = as.data.frame(et)
et = cbind(rownames(et),et)
colnames(et) = c("gene_id","log2FoldChange","log2CPM","PValue","FDR")
write.table(et,"./all_LUAD_DEG.xls", sep="\t",col.names = TRUE,row.names = FALSE,quote=FALSE,na="")
etSig = et[which(et$PValue<0.5 & abs(et$log2FoldChange)>1),]
etSig[which(etSig$log2FoldChange >0),"up_down"] = "UP"
etSig[which(etSig$log2FoldChange <0),"up_down"] = "DOWN"
View(etSig)
write.table(etSig, "./LUAD_DEG.xls",sep = "\t",col.names = TRUE,row.names = F,quote = F,na="")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$up_down,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(DEG.brca.TSS$Mycontrast), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(DEG.brca.TSS$Mycontrast)[which(abs(DEG.brca.TSS$Mycontrast$logFC) >= 6)],
highlight.color = "orange")
# setwd("..")
#counts = read.csv(".\\LUAD_Counts_expMatrix.csv", header = T,row.names = 1)
#LUAD_Counts_expMatrix = counts
library(TCGAbiolinks)
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$up_down,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(DEG.brca.TSS$Mycontrast), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(DEG.brca.TSS$Mycontrast)[which(abs(DEG.brca.TSS$Mycontrast$logFC) >= 6)],
highlight.color = "orange")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$up_down,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(DEG.brca.TSS$Mycontrast), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 6)],
highlight.color = "orange")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$up_down,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 6)],
highlight.color = "orange")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$up_down,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 6)],
highlight.color = "orange")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "LuminalABvsNormal_FC6.TSS.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 6)],
highlight.color = "orange")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 6)],
highlight.color = "orange")
View(etSig)
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 6)],
highlight.color = "orange")
rownames(etSig)[which(abs(etSig$log2FoldChange) >= 6)]
which(abs(etSig$log2FoldChange) >= 6)
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 8)],
highlight.color = "orange")
et = topTags(et, n=1000)
et = as.data.frame(et)
et = cbind(rownames(et),et)
colnames(et) = c("gene_id","log2FoldChange","log2CPM","PValue","FDR")
write.table(et,"./all_LUAD_DEG.xls", sep="\t",col.names = TRUE,row.names = FALSE,quote=FALSE,na="")
etSig = et[which(et$PValue<0.5 & abs(et$log2FoldChange)>1),]
etSig[which(etSig$log2FoldChange >0),"up_down"] = "UP"
etSig[which(etSig$log2FoldChange <0),"up_down"] = "DOWN"
write.table(etSig, "./LUAD_DEG.xls",sep = "\t",col.names = TRUE,row.names = F,quote = F,na="")
et = exactTest(y)
et = topTags(et, n=1000)
et = as.data.frame(et)
et = cbind(rownames(et),et)
colnames(et) = c("gene_id","log2FoldChange","log2CPM","PValue","FDR")
write.table(et,"./all_LUAD_DEG.xls", sep="\t",col.names = TRUE,row.names = FALSE,quote=FALSE,na="")
etSig = et[which(et$PValue<0.5 & abs(et$log2FoldChange)>1),]
etSig[which(etSig$log2FoldChange >0),"up_down"] = "UP"
etSig[which(etSig$log2FoldChange <0),"up_down"] = "DOWN"
write.table(etSig, "./LUAD_DEG.xls",sep = "\t",col.names = TRUE,row.names = F,quote = F,na="")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 6)],
highlight.color = "orange")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 5)],
highlight.color = "orange")
stats::kmeans(LUAD_Counts_expMatrix，2)
stats::kmeans(LUAD_Counts_expMatrix,2)
k_means = stats::kmeans(LUAD_Counts_expMatrix,2)
View(k_means)
View(k_means)
scatterplotMatrix(k_means)
library(car)
library(stats)
install.packages("car")
library(car)
scatterplotMatrix(k_means)
scatterplotMatrix(LUAD_Counts_expMatrix)
et = topTags(et, n=1000)
et = exactTest(y)
et = topTags(et, n=100)
et = as.data.frame(et)
et = cbind(rownames(et),et)
colnames(et) = c("gene_id","log2FoldChange","log2CPM","PValue","FDR")
write.table(et,"./all_LUAD_DEG.xls", sep="\t",col.names = TRUE,row.names = FALSE,quote=FALSE,na="")
etSig = et[which(et$PValue<0.5 & abs(et$log2FoldChange)>1),]
etSig[which(etSig$log2FoldChange >0),"up_down"] = "UP"
etSig[which(etSig$log2FoldChange <0),"up_down"] = "DOWN"
write.table(etSig, "./LUAD_DEG.xls",sep = "\t",col.names = TRUE,row.names = F,quote = F,na="")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 5)],
highlight.color = "orange")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 5)],
highlight.color = "orange")
# setwd("..")
#counts = read.csv(".\\LUAD_Counts_expMatrix.csv", header = T,row.names = 1)
#LUAD_Counts_expMatrix = counts
library(TCGAbiolinks)
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 5)],
highlight.color = "orange")
View(et)
et = topTags(et, n=1000)
et = exactTest(y)
et = topTags(et, n=1000)
et = as.data.frame(et)
et = cbind(rownames(et),et)
colnames(et) = c("gene_id","log2FoldChange","log2CPM","PValue","FDR")
write.table(et,"./all_LUAD_DEG.xls", sep="\t",col.names = TRUE,row.names = FALSE,quote=FALSE,na="")
etSig = et[which(et$PValue<0.5 & abs(et$log2FoldChange)>1),]
etSig[which(etSig$log2FoldChange >0),"up_down"] = "UP"
etSig[which(etSig$log2FoldChange <0),"up_down"] = "DOWN"
write.table(etSig, "./LUAD_DEG.xls",sep = "\t",col.names = TRUE,row.names = F,quote = F,na="")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 5)],
highlight.color = "orange")
et = exactTest(y)
et = topTags(et, n=10000000)
et = as.data.frame(et)
et = cbind(rownames(et),et)
colnames(et) = c("gene_id","log2FoldChange","log2CPM","PValue","FDR")
write.table(et,"./all_LUAD_DEG.xls", sep="\t",col.names = TRUE,row.names = FALSE,quote=FALSE,na="")
etSig = et[which(et$PValue<0.5 & abs(et$log2FoldChange)>1),]
etSig[which(etSig$log2FoldChange >0),"up_down"] = "UP"
etSig[which(etSig$log2FoldChange <0),"up_down"] = "DOWN"
write.table(etSig, "./LUAD_DEG.xls",sep = "\t",col.names = TRUE,row.names = F,quote = F,na="")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 5)],
highlight.color = "orange")
combine = etSig
k_means
k_means.cluster
k_means[cluster]
k_means["cluster"]
type(k_means["cluster"])
cluster = k_means["cluster"]
View(cluster)
View(cluster)
cluster = k_means["cluster"][0]
View(cluster)
View(cluster)
cluster = k_means["cluster"][1]
View(cluster)
View(cluster)
combine = data.frame(etSig,cluster)
cluster[["cluster"]]
cluster = cluster[["cluster"]]
names(cluster)
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster = cluster[which(etSig)]
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster = cluster[which(names(cluster) == etSig[["gene_id"]])]
data.frame(names(cluster),cluster)
data.frame(names(cluster),cluster)
cluster
k_means = kmeans(LUAD_Counts_expMatrix,2)
cluster = k_means["cluster"]
cluster = cluster[["cluster"]]
data.frame(names(cluster),cluster)
data.frame(names(cluster),cluster[[cluster]])
data.frame(names(cluster),cluster[["cluster"]])
data.frame(names(cluster),cluster[])
data.frame(names(cluster),integer(cluster))
typeof(cluster)
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster_df = data.frame(names(cluster),cluster[[cluster]])
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster_df = data.frame(names(cluster),cluster)
View(cluster_df)
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster_df = data.frame(cluster)
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster_df = data.frame(names(cluster),cluster)
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster_df = data.frame(gene_id = names(cluster),k_means = cluster)
combine = rbind(etSig,cluster_df)
merge(etSig,cluster_df,by="gene_id",all=FALSE)
combine = merge(etSig,cluster_df,by="gene_id",all=FALSE)
View(combine)
k_means = kmeans(etSig$log2FoldChange,2)
View(k_means)
cluster = k_means["cluster"]
cluster = cluster[["cluster"]]
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster_df = data.frame(gene_id = names(cluster),k_means = cluster)
combine = merge(etSig,cluster_df,by="gene_id",all=FALSE)
k_means = kmeans(etSig$log2FoldChange,2)
cluster = k_means["cluster"]
cluster = cluster[["cluster"]]
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster_df = data.frame(gene_id = names(cluster),k_means = cluster)
library(car)
k_means = kmeans(etSig$log2FoldChange,2)
cluster = k_means["cluster"]
#scatterplotMatrix(LUAD_Counts_expMatrix)
cluster_df = data.frame(gene_id = names(cluster),k_means = cluster)
combine = merge(etSig,cluster_df,by="gene_id",all=FALSE)
k_means = kmeans(etSig$log2FoldChange,2)
cluster = k_means["cluster"]
View(cluster)
View(cluster)
data.frame(gene_id = names(cluster),k_means = cluster)
#scatterplotMatrix(LUAD_Counts_expMatrix)
#cluster_df = data.frame(gene_id = names(cluster),k_means = cluster)
#combine = merge(etSig,cluster_df,by="gene_id",all=FALSE)
data.frame(etSig,k_means["cluster"])
cluster
k_means["cluster"]
#cluster_df = data.frame(gene_id = names(cluster),k_means = cluster)
#combine = merge(etSig,cluster_df,by="gene_id",all=FALSE)
combine = data.frame(etSig,k_means["cluster"])
View(combine)
k_means = kmeans(etSig$log2FoldChange,10)
#cluster_df = data.frame(gene_id = names(cluster),k_means = cluster)
#combine = merge(etSig,cluster_df,by="gene_id",all=FALSE)
combine = data.frame(etSig,k_means["cluster"])
BiocManager::install("AnnotationHub")
BiocManager::install("AnnotationHub")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("clusterProfiler")
BiocManager::install("dplyr")
BiocManager::install("ggplot2")
library(pheatmap)
pheatmap(LUAD_Counts_expMatrix, #表达数据
cluster_rows = T,#行聚类
cluster_cols = T,#列聚类
annotation_legend=TRUE, # 显示样本分类
show_rownames = T,# 显示行名
show_colnames = T,# 显示列名
scale = "row", #对行标准化
color =colorRampPalette(c("#8854d0", "#ffffff","#fa8231"))(100) # 热图基准颜色
)
pheatmap(head(LUAD_Counts_expMatrix,10), #表达数据
cluster_rows = T,#行聚类
cluster_cols = T,#列聚类
annotation_legend=TRUE, # 显示样本分类
show_rownames = T,# 显示行名
show_colnames = T,# 显示列名
scale = "row", #对行标准化
color =colorRampPalette(c("#8854d0", "#ffffff","#fa8231"))(100) # 热图基准颜色
)
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 100)],
highlight.color = "orange")
library("edgeR")
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 100)],
highlight.color = "orange")
library(TCGAbiolinks)
TCGAVisualize_volcano(etSig$log2FoldChange, etSig$PValue,
filename = "volcano.pdf", xlab = "logFC",
names = rownames(etSig), show.names = "highlighted",
x.cut = 1, y.cut = 0.01,
highlight = rownames(etSig)[which(abs(etSig$log2FoldChange) >= 100)],
highlight.color = "orange")
